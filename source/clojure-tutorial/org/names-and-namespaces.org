#+TITLE: Names and Namespaces

#+TAGS: slide(s)

* Namespace Concepts
** Why Namespaces?                                                    :slide:
*** Re-use common names in different contexts
**** e.g. clojure.core/replace and clojure.string/replace
*** Separate application "layers" or "components"
*** Libraries
*** Separate "public API" and "internal implementation"

** Namespace-Qualified Vars                                           :slide:
#+begin_src clojure
  ;; In the namespace "foo.bar"
  (defn hello [] (println "Hello, World!"))

  ;; In another namespace
  (foo.bar/hello)   ; namespace-qualified
#+end_src
** Namespace Operations                                               :slide:
*** Load: find source on classpath & eval it
*** Alias: make shorter name for namespace-qualified symbols
*** Refer: copy symbol bindings from another namespace into current namespace
*** Import: make Java class names available in current namespace

* =ns= macro
** =ns= Declaration                                                   :slide:
*** Creates namespace and loads, aliases what you need
**** At top of file
*** Refers all of =clojure.core=
*** Imports all of =java.lang=

#+begin_src clojure
  ;; in file foo/bar/baz_quux.clj
  (ns foo.bar.baz-quux)
#+end_src
** =require=                                                          :slide:
*** Loads the namespace if not already loaded
*** Have to refer to things with fully-qualified names

#+begin_src clojure
  (ns my-ns
    (:require clojure.set))
  ;;=> nil

  (clojure.set/union #{1 2} #{2 3 4})
  ;;=> #{1 2 3 4}
#+end_src

** =require :as=                                                      :slide:
*** Loads the namespace if not already loaded
**** Uses a vector to contain arguments
*** Aliases the namespace to alternate name

#+begin_src clojure
  (ns my-ns
    (:require [clojure.set :as set]))
  ;;=> nil

  ;; "set" is an alias for "clojure.set"
  (set/union #{1 2} #{2 3 4})
  ;;=> #{1 2 3 4}
#+end_src

** =require :refer=                                                   :slide:
*** Loads the namespace if not already loaded
**** Uses a vector to contain arguments
*** Refers specified symbols into current namespace

#+begin_src clojure
  (ns my-ns
    (:require [clojure.string :refer [upper-case lower-case]]))
  ;;=> nil
  
  ;; "lower-case" refers to "clojure.string/lower-case"
  (lower-case "Hello World!")
  ;;=> "hello world!"
  (upper-case "Hello World!")
  ;;=> "HELLO WORLD!"
#+end_src

** =require :refer :all=                                              :slide:
*** Loads the namespace if not already loaded
**** Uses a vector to contain arguments
*** Refers all symbols into current namespace

#+begin_src clojure
  (ns my-ns
    (:require [clojure.string :refer :all]))
  ;; WARNING: replace already refers to: #'clojure.core/replace in namespace: my-ns, 
  ;; being replaced by: #'clojure.string/replace
  ;; WARNING: reverse already refers to: #'clojure.core/reverse in namespace: my-ns, 
  ;; being replaced by: #'clojure.string/reverse
  ;;=> nil
  
  ;; "string" refers to "clojure.string/split"
  (split "Hello World!" #" ")
  ;;=> ["Hello" "World!"]
#+end_src

** =import=                                                           :slide:
*** Makes Java classes available w/o package prefix in current namespace
**** Argument is a list
*** Does not support aliases/renaming
*** Does not support Java's =import *=

#+begin_src clojure
  (ns my-ns
    (:import (java.io FileReader File))
  ;;=> nil
  (FileReader. (File. "readme.txt"))
  ;;=> #<FileReader ...>
#+end_src

** =ns= Complete Example                                              :slide:
#+begin_src clojure
  (ns my-app.core
    (:require [clojure.string :as str]
              [clojure.set :refer [difference intersection]]
              [clojure.pprint :refer :all])
    (:import (java.io File FileWriter)
             (java.net URL URI)))
#+end_src

** Namespaces and Files                                               :slide:
*** For require/use to work, have to find code defining namespace
*** Clojure converts namespace name to path and looks on CLASSPATH
**** Dots in namespace name become /
**** Hyphens become underscores
*** Idiomatic to define namespace per file

** Namespaces in the REPL                                             :slide:
*** =in-ns= switches to namespace
**** Creates namespace if it doesn't exist
*** Argument is a symbol, must be quoted
*** REPL always starts in namespace "user"

#+begin_src clojure
  user=> (in-ns 'foo.bar.baz)
  ;;=> nil
  foo.bar.baz=>
#+end_src

